
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d5  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  00000c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021a  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_3>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  d4:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_16>:

#define F_CPU 8000000UL 
//PB1: button
//PB2: LED
volatile uint8_t hit=0,miss=0,totalcounter=0;
ISR(TIMER0_OVF_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	totalcounter++;
  ea:	80 91 00 01 	lds	r24, 0x0100
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 00 01 	sts	0x0100, r24
	if((PINB & (1<<PB3))==0)
  f4:	1b 99       	sbic	0x03, 3	; 3
  f6:	06 c0       	rjmp	.+12     	; 0x104 <__vector_16+0x28>
		hit++;
  f8:	80 91 02 01 	lds	r24, 0x0102
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 02 01 	sts	0x0102, r24
 102:	05 c0       	rjmp	.+10     	; 0x10e <__vector_16+0x32>
	else
		miss++;
 104:	80 91 01 01 	lds	r24, 0x0101
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 01 01 	sts	0x0101, r24
	if(totalcounter==30){
 10e:	80 91 00 01 	lds	r24, 0x0100
 112:	8e 31       	cpi	r24, 0x1E	; 30
 114:	a1 f4       	brne	.+40     	; 0x13e <__vector_16+0x62>
		if(hit >= miss){
 116:	90 91 02 01 	lds	r25, 0x0102
 11a:	80 91 01 01 	lds	r24, 0x0101
 11e:	98 17       	cp	r25, r24
 120:	20 f0       	brcs	.+8      	; 0x12a <__vector_16+0x4e>
			PORTB ^= (1<<PB0);
 122:	95 b1       	in	r25, 0x05	; 5
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	89 27       	eor	r24, r25
 128:	85 b9       	out	0x05, r24	; 5
		}
		TCCR0B = 0;//kill timer
 12a:	15 bc       	out	0x25, r1	; 37
    	PCMSK0 = (1<<PCINT0);//set pin change interrupt on PB0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 6b 00 	sts	0x006B, r24
		hit=0;
 132:	10 92 02 01 	sts	0x0102, r1
		miss=0;
 136:	10 92 01 01 	sts	0x0101, r1
		totalcounter=0;
 13a:	10 92 00 01 	sts	0x0100, r1
	}
	
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_3>:
ISR(PCINT0_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
	if((PINB & (1<<PB3))==0){
 158:	1b 99       	sbic	0x03, 3	; 3
 15a:	08 c0       	rjmp	.+16     	; 0x16c <__vector_3+0x20>
		TCNT0 = 0;
 15c:	16 bc       	out	0x26, r1	; 38
		PCMSK0 = 0;//clear pin change interrupts
 15e:	10 92 6b 00 	sts	0x006B, r1
	    TIMSK0 = (1<<TOIE0);//set timer overflow interrupts
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 6e 00 	sts	0x006E, r24
	    TCCR0B = (1<<CS01);//set clock divider (8) for timer
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	85 bd       	out	0x25, r24	; 37
	}

}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:

int main(void){
    DDRB = ~(1<<PB1);//all outputs
 178:	8d ef       	ldi	r24, 0xFD	; 253
 17a:	84 b9       	out	0x04, r24	; 4
    PORTB = (1<<PB1);
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	85 b9       	out	0x05, r24	; 5
    PCICR = (1<<PCIE0);//enable pin change interrupts
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 68 00 	sts	0x0068, r24
    PCMSK0 = (1<<PCINT0);//set pin change interrupt on PB0
 186:	80 93 6b 00 	sts	0x006B, r24
    while(1){
    	asm("SEI");
 18a:	78 94       	sei
    	asm("sleep");
 18c:	88 95       	sleep
 18e:	fd cf       	rjmp	.-6      	; 0x18a <main+0x12>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
