
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f8  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000018c  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c37  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1b c0       	rjmp	.+54     	; 0x40 <__vector_4>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	52 d0       	rcall	.+164    	; 0xe0 <main>
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_4>:

//button: PB0
//LED: PB1
volatile uint8_t incrementer=0,totalcounter=0;

ISR(TIMER1_OVF_vect){
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
	totalcounter++;
  4c:	80 91 60 00 	lds	r24, 0x0060
  50:	8f 5f       	subi	r24, 0xFF	; 255
  52:	80 93 60 00 	sts	0x0060, r24
	if(PORTB & PORTB3)
  56:	88 b3       	in	r24, 0x18	; 24
  58:	83 70       	andi	r24, 0x03	; 3
  5a:	29 f0       	breq	.+10     	; 0x66 <__vector_4+0x26>
		incrementer++;
  5c:	80 91 61 00 	lds	r24, 0x0061
  60:	8f 5f       	subi	r24, 0xFF	; 255
  62:	80 93 61 00 	sts	0x0061, r24
	if(totalcounter==30){
  66:	80 91 60 00 	lds	r24, 0x0060
  6a:	8e 31       	cpi	r24, 0x1E	; 30
  6c:	09 f4       	brne	.+2      	; 0x70 <__vector_4+0x30>
		    TCCR1 = 0;//kill timer
  6e:	10 be       	out	0x30, r1	; 48
	}
	
}
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <__vector_2>:
ISR(PCINT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25

	if(PORTB && ~(1<<PORTB0)){
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	81 11       	cpse	r24, r1
  8e:	1c c0       	rjmp	.+56     	; 0xc8 <__vector_2+0x4c>
		TCNT1 = 0;
	    TIFR = (1<<TOV1);//set timer overflow interrupts
	    TCCR1 = (1<<CS13)|(1<<CS11);//set clock divider (1024) for timer
	}else
		if(totalcounter == incrementer){
  90:	90 91 60 00 	lds	r25, 0x0060
  94:	80 91 61 00 	lds	r24, 0x0061
  98:	98 17       	cp	r25, r24
  9a:	39 f0       	breq	.+14     	; 0xaa <__vector_2+0x2e>
			totalcounter=0;
			incrementer=0;
			PORTB ^= PORTB1;
	}

}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti
		TCNT1 = 0;
	    TIFR = (1<<TOV1);//set timer overflow interrupts
	    TCCR1 = (1<<CS13)|(1<<CS11);//set clock divider (1024) for timer
	}else
		if(totalcounter == incrementer){
			totalcounter=0;
  aa:	10 92 60 00 	sts	0x0060, r1
			incrementer=0;
  ae:	10 92 61 00 	sts	0x0061, r1
			PORTB ^= PORTB1;
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	88 bb       	out	0x18, r24	; 24
	}

}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti
	
}
ISR(PCINT0_vect){

	if(PORTB && ~(1<<PORTB0)){
		TCNT1 = 0;
  c8:	1f bc       	out	0x2f, r1	; 47
	    TIFR = (1<<TOV1);//set timer overflow interrupts
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	88 bf       	out	0x38, r24	; 56
	    TCCR1 = (1<<CS13)|(1<<CS11);//set clock divider (1024) for timer
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 bf       	out	0x30, r24	; 48
			totalcounter=0;
			incrementer=0;
			PORTB ^= PORTB1;
	}

}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:

int main(void){
    DDRB = ~(1<<PORTB0);//all outputs except PB0
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	87 bb       	out	0x17, r24	; 23
    GIMSK = (1<<PCIE);//set pin change interrupts
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	8b bf       	out	0x3b, r24	; 59
    PCMSK = (1<<PCINT0);//set pin change interrupt on pin 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	85 bb       	out	0x15, r24	; 21
    PORTB = (1<<PORTB0);//set the pullup on PB0
  ec:	88 bb       	out	0x18, r24	; 24
    while(1){
    	asm("sei");
  ee:	78 94       	sei
    	asm("sleep");
  f0:	88 95       	sleep
	}
  f2:	fd cf       	rjmp	.-6      	; 0xee <main+0xe>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
