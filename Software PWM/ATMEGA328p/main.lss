
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a63  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091c  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000229  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fd  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_14>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_15>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e0       	ldi	r30, 0x06	; 6
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  ea:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_15>:
//9: 87
//10:125

volatile uint8_t lookupcounter = 4, incrementer=0,hit=0,miss=0,totalcounter=0;
const uint8_t LOOKUP[] = {0,6,12,19,26,38,50,65,87,125};
ISR(TIMER0_COMPB_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	if(OCR0B != 125)
  fe:	88 b5       	in	r24, 0x28	; 40
 100:	8d 37       	cpi	r24, 0x7D	; 125
 102:	09 f0       	breq	.+2      	; 0x106 <__vector_15+0x14>
		PORTB &= ~(1<<PB2);
 104:	2a 98       	cbi	0x05, 2	; 5
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_14>:
ISR(TIMER0_COMPA_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	if(OCR0B != 0)
 11e:	88 b5       	in	r24, 0x28	; 40
 120:	81 11       	cpse	r24, r1
		PORTB |= (1<<PB2);
 122:	2a 9a       	sbi	0x05, 2	; 5
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_13>:

/////////////////

ISR(TIMER1_OVF_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	totalcounter++;
 13e:	80 91 0c 01 	lds	r24, 0x010C
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 0c 01 	sts	0x010C, r24
	if((PINB & (1<<PB3))==0)
 148:	1b 99       	sbic	0x03, 3	; 3
 14a:	06 c0       	rjmp	.+12     	; 0x158 <__vector_13+0x28>
		hit++;
 14c:	80 91 0e 01 	lds	r24, 0x010E
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 0e 01 	sts	0x010E, r24
 156:	05 c0       	rjmp	.+10     	; 0x162 <__vector_13+0x32>
	else
		miss++;
 158:	80 91 0d 01 	lds	r24, 0x010D
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 0d 01 	sts	0x010D, r24
	if(totalcounter==30){
 162:	80 91 0c 01 	lds	r24, 0x010C
 166:	8e 31       	cpi	r24, 0x1E	; 30
 168:	a9 f4       	brne	.+42     	; 0x194 <__vector_13+0x64>
		if(hit >= miss){
 16a:	90 91 0e 01 	lds	r25, 0x010E
 16e:	80 91 0d 01 	lds	r24, 0x010D
 172:	98 17       	cp	r25, r24
 174:	20 f0       	brcs	.+8      	; 0x17e <__vector_13+0x4e>
			PORTB ^= (1<<PB0);
 176:	95 b1       	in	r25, 0x05	; 5
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	89 27       	eor	r24, r25
 17c:	85 b9       	out	0x05, r24	; 5
		}
		TCCR1B = 0;//kill timer
 17e:	10 92 81 00 	sts	0x0081, r1
    	PCMSK0 = (1<<PCINT0);//set pin change interrupt on PB0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 6b 00 	sts	0x006B, r24
		hit=0;
 188:	10 92 0e 01 	sts	0x010E, r1
		miss=0;
 18c:	10 92 0d 01 	sts	0x010D, r1
		totalcounter=0;
 190:	10 92 0c 01 	sts	0x010C, r1
	}
	
}
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_3>:
ISR(PCINT0_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
	if((PINB & (1<<PB3))==0){
 1ae:	1b 99       	sbic	0x03, 3	; 3
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <__vector_3+0x28>
		TCNT1 = 0;
 1b2:	10 92 85 00 	sts	0x0085, r1
 1b6:	10 92 84 00 	sts	0x0084, r1
		PCMSK0 = 0;//clear pin change interrupts
 1ba:	10 92 6b 00 	sts	0x006B, r1
	    TIMSK0 = (1<<TOIE0);//set timer overflow interrupts
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 6e 00 	sts	0x006E, r24
	    TCCR1B = (1<<CS01);//set clock divider (8) for timer
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	80 93 81 00 	sts	0x0081, r24
	}

}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:

int main(void){
    DDRB = ~(1<<PB1);//all outputs except PB1
 1d6:	8d ef       	ldi	r24, 0xFD	; 253
 1d8:	84 b9       	out	0x04, r24	; 4
    PORTB = (1<<PB1);//set pullup
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	85 b9       	out	0x05, r24	; 5
    PCICR = (1<<PCIE0);//enable pin change interrupts
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	90 93 68 00 	sts	0x0068, r25
    PCMSK0 = (1<<PCINT0);//set pin change interrupt on PB0
 1e4:	90 93 6b 00 	sts	0x006B, r25
 
    OCR0A = 125;//CTC value for 1 KHz
 1e8:	9d e7       	ldi	r25, 0x7D	; 125
 1ea:	97 bd       	out	0x27, r25	; 39
    OCR0B = 62;//CTC value for 50% duty cycle
 1ec:	9e e3       	ldi	r25, 0x3E	; 62
 1ee:	98 bd       	out	0x28, r25	; 40
    
    TCCR0A = (1<<WGM01);//clear timer on compare with OCR0A
 1f0:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS01)|(1<<CS00);///64 prescaler
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	85 bd       	out	0x25, r24	; 37
    TIMSK0 =(1<<OCIE0A)|(1<<OCIE0B);//timer match b interrupt
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	80 93 6e 00 	sts	0x006E, r24
    
    
    
    while(1){
    	sei();
 1fc:	78 94       	sei
    	asm("sleep");
 1fe:	88 95       	sleep
 200:	fd cf       	rjmp	.-6      	; 0x1fc <main+0x26>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
