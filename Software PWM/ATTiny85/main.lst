   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 103               	.global	__vector_5
 105               	__vector_5:
 106               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <stdint.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** 
   5:main.c        **** #define F_CPU 8000000UL 
   6:main.c        **** 
   7:main.c        **** volatile uint8_t incrementer=0,totalcounter=0;
   8:main.c        **** 
   9:main.c        **** ISR(TIMER0_OVF_vect){
 108               	.LM0:
 109               	.LFBB1:
 110 0000 1F92      		push r1
 111 0002 0F92      		push r0
 112 0004 0FB6      		in r0,__SREG__
 113 0006 0F92      		push r0
 114 0008 1124      		clr __zero_reg__
 115 000a 8F93      		push r24
 116               	/* prologue: Signal */
 117               	/* frame size = 0 */
 118               	/* stack size = 4 */
 119               	.L__stack_usage = 4
  10:main.c        **** 	totalcounter++;
 121               	.LM1:
 122 000c 8091 0000 		lds r24,totalcounter
 123 0010 8F5F      		subi r24,lo8(-(1))
 124 0012 8093 0000 		sts totalcounter,r24
  11:main.c        **** 	if(PORTB && PORTB0)
 126               	.LM2:
 127 0016 88B3      		in r24,0x18
  12:main.c        **** 		incrementer++;
  13:main.c        **** 	if(totalcounter==30){
 129               	.LM3:
 130 0018 8091 0000 		lds r24,totalcounter
 131 001c 8E31      		cpi r24,lo8(30)
 132 001e 01F4      		brne .L1
  14:main.c        **** 		    TCCR0B = 0;//kill timer
 134               	.LM4:
 135 0020 13BE      		out 0x33,__zero_reg__
 136               	.L1:
 137               	/* epilogue start */
  15:main.c        **** 	}
  16:main.c        **** 	
  17:main.c        **** }
 139               	.LM5:
 140 0022 8F91      		pop r24
 141 0024 0F90      		pop r0
 142 0026 0FBE      		out __SREG__,r0
 143 0028 0F90      		pop r0
 144 002a 1F90      		pop r1
 145 002c 1895      		reti
 147               	.Lscope1:
 149               		.stabd	78,0,0
 151               	.global	__vector_2
 153               	__vector_2:
 154               		.stabd	46,0,0
  18:main.c        **** ISR(PCINT0_vect){
 156               	.LM6:
 157               	.LFBB2:
 158 002e 1F92      		push r1
 159 0030 0F92      		push r0
 160 0032 0FB6      		in r0,__SREG__
 161 0034 0F92      		push r0
 162 0036 1124      		clr __zero_reg__
 163 0038 8F93      		push r24
 164 003a 9F93      		push r25
 165               	/* prologue: Signal */
 166               	/* frame size = 0 */
 167               	/* stack size = 5 */
 168               	.L__stack_usage = 5
  19:main.c        **** 	if(PORTB && PORTB0){
 170               	.LM7:
 171 003c 88B3      		in r24,0x18
  20:main.c        **** 		TCNT0 = 0;
  21:main.c        **** 	    TIFR = (1<<TOV0);//set timer overflow interrupts
  22:main.c        **** 	    TCCR0B = (1<<CS02)|(1<<CS00);//set clock divider (1024) for timer
  23:main.c        **** 	}else{
  24:main.c        **** 		if(totalcounter == incrementer)
 173               	.LM8:
 174 003e 9091 0000 		lds r25,totalcounter
 175 0042 8091 0000 		lds r24,incrementer
 176 0046 9813      		cpse r25,r24
 177 0048 00C0      		rjmp .L4
  25:main.c        **** 			PORTB ^= PORTB1;
 179               	.LM9:
 180 004a 98B3      		in r25,0x18
 181 004c 81E0      		ldi r24,lo8(1)
 182 004e 8927      		eor r24,r25
 183 0050 88BB      		out 0x18,r24
 184               	.L4:
 185               	/* epilogue start */
  26:main.c        **** 	}
  27:main.c        **** 
  28:main.c        **** }
 187               	.LM10:
 188 0052 9F91      		pop r25
 189 0054 8F91      		pop r24
 190 0056 0F90      		pop r0
 191 0058 0FBE      		out __SREG__,r0
 192 005a 0F90      		pop r0
 193 005c 1F90      		pop r1
 194 005e 1895      		reti
 196               	.Lscope2:
 198               		.stabd	78,0,0
 199               		.section	.text.startup,"ax",@progbits
 201               	.global	main
 203               	main:
 204               		.stabd	46,0,0
  29:main.c        **** 
  30:main.c        **** int main(void){
 206               	.LM11:
 207               	.LFBB3:
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
  31:main.c        ****     DDRB = 0xFD;//all outputs
 213               	.LM12:
 214 0000 8DEF      		ldi r24,lo8(-3)
 215 0002 87BB      		out 0x17,r24
  32:main.c        ****     GIMSK = (1<<PCIE);//set pin change interrupts
 217               	.LM13:
 218 0004 80E2      		ldi r24,lo8(32)
 219 0006 8BBF      		out 0x3b,r24
  33:main.c        ****     PCMSK = (1<<PCINT0);//set pin change interrupt on pin 0
 221               	.LM14:
 222 0008 81E0      		ldi r24,lo8(1)
 223 000a 85BB      		out 0x15,r24
 224               	.L7:
  34:main.c        ****     while(1){
  35:main.c        ****     	asm("sei");
 226               	.LM15:
 227               	/* #APP */
 228               	 ;  35 "main.c" 1
 229 000c 7894      		sei
 230               	 ;  0 "" 2
  36:main.c        ****     	asm("sleep");
 232               	.LM16:
 233               	 ;  36 "main.c" 1
 234 000e 8895      		sleep
 235               	 ;  0 "" 2
  37:main.c        **** 	}
 237               	.LM17:
 238               	/* #NOAPP */
 239 0010 00C0      		rjmp .L7
 241               	.Lscope3:
 243               		.stabd	78,0,0
 244               	.global	totalcounter
 245               		.section .bss
 248               	totalcounter:
 249 0000 00        		.zero	1
 250               	.global	incrementer
 253               	incrementer:
 254 0001 00        		.zero	1
 257               		.text
 259               	.Letext0:
 260               		.ident	"GCC: (GNU) 4.9.2"
 261               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccidxRht.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccidxRht.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccidxRht.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccidxRht.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccidxRht.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccidxRht.s:105    .text:0000000000000000 __vector_5
     /tmp/ccidxRht.s:248    .bss:0000000000000000 totalcounter
     /tmp/ccidxRht.s:153    .text:000000000000002e __vector_2
     /tmp/ccidxRht.s:253    .bss:0000000000000001 incrementer
     /tmp/ccidxRht.s:203    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss
