
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b6  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000014a  2**0
                  ALLOC
  3 .stab         000005f4  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c37  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	34 c0       	rjmp	.+104    	; 0x6e <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	32 d0       	rcall	.+100    	; 0xa0 <main>
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_5>:

#define F_CPU 8000000UL 

volatile uint8_t incrementer=0,totalcounter=0;

ISR(TIMER0_OVF_vect){
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
	totalcounter++;
  4c:	80 91 60 00 	lds	r24, 0x0060
  50:	8f 5f       	subi	r24, 0xFF	; 255
  52:	80 93 60 00 	sts	0x0060, r24
	if(PORTB && PORTB0)
  56:	88 b3       	in	r24, 0x18	; 24
		incrementer++;
	if(totalcounter==30){
  58:	80 91 60 00 	lds	r24, 0x0060
  5c:	8e 31       	cpi	r24, 0x1E	; 30
  5e:	09 f4       	brne	.+2      	; 0x62 <__vector_5+0x22>
		    TCCR0B = 0;//kill timer
  60:	13 be       	out	0x33, r1	; 51
	}
	
}
  62:	8f 91       	pop	r24
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <__vector_2>:
ISR(PCINT0_vect){
  6e:	1f 92       	push	r1
  70:	0f 92       	push	r0
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	if(PORTB && PORTB0){
  7c:	88 b3       	in	r24, 0x18	; 24
		TCNT0 = 0;
	    TIFR = (1<<TOV0);//set timer overflow interrupts
	    TCCR0B = (1<<CS02)|(1<<CS00);//set clock divider (1024) for timer
	}else{
		if(totalcounter == incrementer)
  7e:	90 91 60 00 	lds	r25, 0x0060
  82:	80 91 61 00 	lds	r24, 0x0061
  86:	98 13       	cpse	r25, r24
  88:	04 c0       	rjmp	.+8      	; 0x92 <__vector_2+0x24>
			PORTB ^= PORTB1;
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 27       	eor	r24, r25
  90:	88 bb       	out	0x18, r24	; 24
	}

}
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <main>:

int main(void){
    DDRB = 0xFD;//all outputs
  a0:	8d ef       	ldi	r24, 0xFD	; 253
  a2:	87 bb       	out	0x17, r24	; 23
    GIMSK = (1<<PCIE);//set pin change interrupts
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	8b bf       	out	0x3b, r24	; 59
    PCMSK = (1<<PCINT0);//set pin change interrupt on pin 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	85 bb       	out	0x15, r24	; 21
    while(1){
    	asm("sei");
  ac:	78 94       	sei
    	asm("sleep");
  ae:	88 95       	sleep
	}
  b0:	fd cf       	rjmp	.-6      	; 0xac <main+0xc>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
