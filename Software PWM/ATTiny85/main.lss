
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000000ae  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005f4  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c64  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__vector_2>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__vector_11>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee ea       	ldi	r30, 0xAE	; 174
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 36       	cpi	r26, 0x6C	; 108
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	21 d0       	rcall	.+66     	; 0x84 <main>
  42:	33 c0       	rjmp	.+102    	; 0xaa <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <__vector_11>:
//8: 65
//9: 87
//10:125
volatile uint8_t lookupcounter = 4;
const uint8_t LOOKUP[] = {0,6,12,19,26,38,50,65,87,125};
ISR(TIMER0_COMPB_vect){
  46:	1f 92       	push	r1
  48:	0f 92       	push	r0
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	0f 92       	push	r0
  4e:	11 24       	eor	r1, r1
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
	PORTB ^= 0x01;
  54:	98 b3       	in	r25, 0x18	; 24
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	89 27       	eor	r24, r25
  5a:	88 bb       	out	0x18, r24	; 24
}
  5c:	9f 91       	pop	r25
  5e:	8f 91       	pop	r24
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <__vector_2>:
ISR(PCINT0_vect){
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	8f 93       	push	r24
	if(PORTB && PORTB0){
  76:	88 b3       	in	r24, 0x18	; 24
		OCR0B = LOOKUP[lookupcounter];
		lookupcounter++;
	}

}
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <main>:

int main(void){
    DDRB = 0xFD;//all outputs
  84:	8d ef       	ldi	r24, 0xFD	; 253
  86:	87 bb       	out	0x17, r24	; 23
    OCR0A = 62;//CTC value for 1 KHz
  88:	8e e3       	ldi	r24, 0x3E	; 62
  8a:	89 bd       	out	0x29, r24	; 41
    OCR0B = 125;//CTC value for 50% duty cycle
  8c:	8d e7       	ldi	r24, 0x7D	; 125
  8e:	88 bd       	out	0x28, r24	; 40
    
    GIMSK = (1<<PCIE);//set pin change interrupts
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	8b bf       	out	0x3b, r24	; 59
    PCMSK = (1<<PCINT0);//set pin change interrupt on pin 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
    TCCR0A = (1<<WGM01);//clear timer on compare with OCR0A
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	8a bd       	out	0x2a, r24	; 42
    TCCR0B = (1<<CS01)|(1<<CS00);///64 prescaler
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	83 bf       	out	0x33, r24	; 51
    TIMSK =(1<<OCIE0B);
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	89 bf       	out	0x39, r24	; 57
    while(1){
    	asm("sei");
  a4:	78 94       	sei
    	asm("sleep");
  a6:	88 95       	sleep
	}
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <main+0x20>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
