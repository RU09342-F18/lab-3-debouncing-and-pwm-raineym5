
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000146  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  000001e6  2**0
                  ALLOC
  3 .stab         00000708  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca5  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e4       	ldi	r30, 0x46	; 70
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 36       	cpi	r26, 0x6C	; 108
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ac e6       	ldi	r26, 0x6C	; 108
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 37       	cpi	r26, 0x70	; 112
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	66 d0       	rcall	.+204    	; 0x11e <main>
  52:	77 c0       	rjmp	.+238    	; 0x142 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_2>:
//10:125

volatile uint8_t lookupcounter = 4, incrementer=0,hit=0,miss=0,totalcounter=0;
const uint8_t LOOKUP[] = {0,6,12,19,26,38,50,65,87,125};

ISR(PCINT0_vect){
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24

	if((PINB & (1<<PB3))==0){
  62:	b3 99       	sbic	0x16, 3	; 22
  64:	07 c0       	rjmp	.+14     	; 0x74 <__vector_2+0x1e>

    	GIMSK =0;//clear pin change interrupts
  66:	1b be       	out	0x3b, r1	; 59
		TCNT1 = 0;
  68:	1f bc       	out	0x2f, r1	; 47
	    TIMSK |= (1<<TOIE1);//set timer overflow interrupts
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	84 60       	ori	r24, 0x04	; 4
  6e:	89 bf       	out	0x39, r24	; 57
	    TCCR1 = (1<<CS12);//set clock divider (8) for timer
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	80 bf       	out	0x30, r24	; 48
	}
}
  74:	8f 91       	pop	r24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <__vector_4>:

ISR(TIMER1_OVF_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	totalcounter++;
  92:	80 91 6c 00 	lds	r24, 0x006C
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 6c 00 	sts	0x006C, r24
	if((PINB & (1<<PB3))==0)
  9c:	b3 99       	sbic	0x16, 3	; 22
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <__vector_4+0x44>
		hit++;
  a0:	80 91 6e 00 	lds	r24, 0x006E
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 6e 00 	sts	0x006E, r24
	else
		miss++;
	if(totalcounter==30){
  aa:	80 91 6c 00 	lds	r24, 0x006C
  ae:	8e 31       	cpi	r24, 0x1E	; 30
  b0:	91 f0       	breq	.+36     	; 0xd6 <__vector_4+0x56>
		GIMSK |= (1<<PCIE);//set pin change interrupts
		hit=0;
		miss=0;
		totalcounter=0;
	}
}
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti
ISR(TIMER1_OVF_vect){
	totalcounter++;
	if((PINB & (1<<PB3))==0)
		hit++;
	else
		miss++;
  c4:	80 91 6d 00 	lds	r24, 0x006D
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 6d 00 	sts	0x006D, r24
	if(totalcounter==30){
  ce:	80 91 6c 00 	lds	r24, 0x006C
  d2:	8e 31       	cpi	r24, 0x1E	; 30
  d4:	71 f7       	brne	.-36     	; 0xb2 <__vector_4+0x32>
		if(hit >= miss){
  d6:	90 91 6e 00 	lds	r25, 0x006E
  da:	80 91 6d 00 	lds	r24, 0x006D
  de:	98 17       	cp	r25, r24
  e0:	80 f0       	brcs	.+32     	; 0x102 <__vector_4+0x82>
		
			lookupcounter++;
  e2:	80 91 60 00 	lds	r24, 0x0060
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 60 00 	sts	0x0060, r24
			if(lookupcounter == 10)
  ec:	80 91 60 00 	lds	r24, 0x0060
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	91 f0       	breq	.+36     	; 0x118 <__vector_4+0x98>
				lookupcounter=0;
			OCR0B = LOOKUP[lookupcounter];
  f4:	e0 91 60 00 	lds	r30, 0x0060
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ef 59       	subi	r30, 0x9F	; 159
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	80 81       	ld	r24, Z
 100:	88 bd       	out	0x28, r24	; 40
			
		}
		TCCR1 = 0;//kill timer
 102:	10 be       	out	0x30, r1	; 48
		GIMSK |= (1<<PCIE);//set pin change interrupts
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	80 62       	ori	r24, 0x20	; 32
 108:	8b bf       	out	0x3b, r24	; 59
		hit=0;
 10a:	10 92 6e 00 	sts	0x006E, r1
		miss=0;
 10e:	10 92 6d 00 	sts	0x006D, r1
		totalcounter=0;
 112:	10 92 6c 00 	sts	0x006C, r1
 116:	cd cf       	rjmp	.-102    	; 0xb2 <__vector_4+0x32>
	if(totalcounter==30){
		if(hit >= miss){
		
			lookupcounter++;
			if(lookupcounter == 10)
				lookupcounter=0;
 118:	10 92 60 00 	sts	0x0060, r1
 11c:	eb cf       	rjmp	.-42     	; 0xf4 <__vector_4+0x74>

0000011e <main>:
		totalcounter=0;
	}
}
int main(void){

    DDRB = ~(1<<PB3);//all outputs except PB3
 11e:	87 ef       	ldi	r24, 0xF7	; 247
 120:	87 bb       	out	0x17, r24	; 23
    OCR0A = 125;//CTC value for 1 KHz
 122:	8d e7       	ldi	r24, 0x7D	; 125
 124:	89 bd       	out	0x29, r24	; 41
    OCR0B = 62;//CTC value for 50% duty cycle
 126:	8e e3       	ldi	r24, 0x3E	; 62
 128:	88 bd       	out	0x28, r24	; 40
    PORTB = (1<<PB3);//turn on pullups
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	88 bb       	out	0x18, r24	; 24
    
    GIMSK = (1<<PCIE);//set pin change interrupts
 12e:	90 e2       	ldi	r25, 0x20	; 32
 130:	9b bf       	out	0x3b, r25	; 59
    PCMSK = (1<<PCINT3);//set pin change interrupt on pin PB3 in specific
 132:	85 bb       	out	0x15, r24	; 21
    TCCR0A = (1<<WGM01)|(1<<COM0A1);//clear timer on compare with OCR0A
 134:	82 e8       	ldi	r24, 0x82	; 130
 136:	8a bd       	out	0x2a, r24	; 42
    TCCR0B = (1<<CS01)|(1<<CS00);///64 prescaler
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	83 bf       	out	0x33, r24	; 51
	
    while(1){
    	sei();
 13c:	78 94       	sei
    	asm("sleep");
 13e:	88 95       	sleep
	}
 140:	fd cf       	rjmp	.-6      	; 0x13c <main+0x1e>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
