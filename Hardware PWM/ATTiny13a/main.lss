
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000164  2**0
                  ALLOC
  3 .stab         000005f4  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c93  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ec       	ldi	r30, 0xC4	; 196
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 36       	cpi	r26, 0x6C	; 108
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ac e6       	ldi	r26, 0x6C	; 108
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 37       	cpi	r26, 0x70	; 112
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	27 d0       	rcall	.+78     	; 0xa0 <main>
  52:	36 c0       	rjmp	.+108    	; 0xc0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_2>:
//10:255

volatile uint8_t lookupcounter = 4, incrementer=0,hit=0,miss=0,totalcounter=0;
const uint8_t LOOKUP[] = {0,11,24,39,56,76,101,133,178,255};

ISR(PCINT0_vect){
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	ef 93       	push	r30
  64:	ff 93       	push	r31

	if((PINB & (1<<PB3))==0){
  66:	b3 99       	sbic	0x16, 3	; 22
  68:	10 c0       	rjmp	.+32     	; 0x8a <__vector_2+0x34>
		for(uint16_t i=0;i<10000;i++);
		lookupcounter++;
  6a:	80 91 60 00 	lds	r24, 0x0060
  6e:	8f 5f       	subi	r24, 0xFF	; 255
  70:	80 93 60 00 	sts	0x0060, r24
		if(lookupcounter == 10)
  74:	80 91 60 00 	lds	r24, 0x0060
  78:	8a 30       	cpi	r24, 0x0A	; 10
  7a:	79 f0       	breq	.+30     	; 0x9a <__vector_2+0x44>
			lookupcounter=0;
		OCR0A = LOOKUP[lookupcounter];
  7c:	e0 91 60 00 	lds	r30, 0x0060
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	ef 59       	subi	r30, 0x9F	; 159
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	80 81       	ld	r24, Z
  88:	89 bd       	out	0x29, r24	; 41
	}
}
  8a:	ff 91       	pop	r31
  8c:	ef 91       	pop	r30
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

	if((PINB & (1<<PB3))==0){
		for(uint16_t i=0;i<10000;i++);
		lookupcounter++;
		if(lookupcounter == 10)
			lookupcounter=0;
  9a:	10 92 60 00 	sts	0x0060, r1
  9e:	ee cf       	rjmp	.-36     	; 0x7c <__vector_2+0x26>

000000a0 <main>:
	}
}

int main(void){

    DDRB = ~(1<<PB3);//all outputs except PB3
  a0:	87 ef       	ldi	r24, 0xF7	; 247
  a2:	87 bb       	out	0x17, r24	; 23
    OCR0A = 125;//CTC value for 1 KHz
  a4:	8d e7       	ldi	r24, 0x7D	; 125
  a6:	89 bd       	out	0x29, r24	; 41

    PORTB = (1<<PB3);//turn on pullups
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	88 bb       	out	0x18, r24	; 24
    
    GIMSK = (1<<PCIE);//set pin change interrupts
  ac:	90 e2       	ldi	r25, 0x20	; 32
  ae:	9b bf       	out	0x3b, r25	; 59
    PCMSK = (1<<PCINT3);//set pin change interrupt on pin PB3 in specific
  b0:	85 bb       	out	0x15, r24	; 21
    TCCR0A = (1<<WGM00)|(1<<COM0B1);//clear timer on compare with OCR0A
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	8a bd       	out	0x2a, r24	; 42
    TCCR0B = (1<<CS01)|(1<<CS00)|(1<<WGM02);///64 prescaler, fast pwm
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	83 bf       	out	0x33, r24	; 51


    while(1){
    	sei();
  ba:	78 94       	sei
    	asm("sleep");
  bc:	88 95       	sleep
	}
  be:	fd cf       	rjmp	.-6      	; 0xba <main+0x1a>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
